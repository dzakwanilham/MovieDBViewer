// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target arm64-apple-ios18.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-experimental-feature OpaqueTypeErasure -enable-bare-slash-regex -module-name DynamicButtonFramework
@_exported import DynamicButtonFramework
import Foundation
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum ButtonStyle {
  case white
  case blue
  public static func == (a: DynamicButtonFramework.ButtonStyle, b: DynamicButtonFramework.ButtonStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class CustomButton : UIKit.UIButton {
  @_Concurrency.MainActor @preconcurrency public var didTap: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public func greet() -> Swift.String
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency public init(style: DynamicButtonFramework.ButtonStyle, title: Swift.String)
  @objc deinit
}
extension DynamicButtonFramework.ButtonStyle : Swift.Equatable {}
extension DynamicButtonFramework.ButtonStyle : Swift.Hashable {}
